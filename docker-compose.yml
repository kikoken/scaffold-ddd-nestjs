services:
  app:
    container_name: sc-app
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_SERVICE_NAME=sc
    depends_on:
      - postgres
      - otel-collector

  postgres:
    container_name: sc-postgres
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: 'America/Santiago'
      PGTZ: 'America/Santiago'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: ['postgres', '-c', 'timezone=America/Santiago']

  otel-collector:
    container_name: sc-otel
    image: otel/opentelemetry-collector-contrib:0.90.1
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4318:4318' # OTLP HTTP receiver
      - '8888:8888' # Prometheus metrics exposed by the collector
      - '8889:8889' # Prometheus exporter metrics
    depends_on:
      - jaeger
      - prometheus

  jaeger:
    container_name: sc-jaeger
    image: jaegertracing/all-in-one:1.50
    ports:
      - '16686:16686' # UI
      - '4317:4317' # OTLP gRPC
      - '14268:14268' # jaeger.thrift over HTTP
      - '14250:14250' # Model.proto
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  prometheus:
    container_name: sc-prometheus
    image: prom/prometheus:v2.48.0
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'

  grafana:
    container_name: sc-grafana
    image: grafana/grafana:10.2.2
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
